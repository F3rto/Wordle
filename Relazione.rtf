{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww33100\viewh17820\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\qc\partightenfactor0

\f1\b\fs28 Relazione
\f0\b0\fs22 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b Comandi per compilare ed eseguire da CLI i due programmi:
\f0\b0 \
\
Compilazione server dalla cartella Zocco_Giuseppe_614838:\
javac -cp "server/gson-2.6.2.jar" server/*.java\
per eseguire:\
java -cp ".:server/gson-2.6.2.jar" server.ServerMain\
\
Compilazione client dalla cartella Zocco_Giuseppe_614838:\
javac -cp \'93client/gson-2.6.2.jar" client/*.java\
Per eseguire:\
java -cp \'93.:client/gson-2.6.2.jar" client.ServerMain\
\
La libreria json-2.6.2.jar deve essere nella stessa directory del programma che si vuole compilare e/o eseguire.\
\

\f1\b\fs24 Scelte implementative
\fs22 \
\
Server
\f0\b0 \
All\'92avvio il server legge tutti i parametri di configurazione dal file \'93configServer.txt\'94, la presenza di questo file \'e8 obbligatoria.\
\
Subito dopo, il server, carica in memoria la lista degli utenti registrati, in una ConcurrentLinkedQueue, ossia una coda concorrente thread-safe (vedi documentazione ufficiale: {\field{\*\fldinst{HYPERLINK "https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html"}}{\fldrslt https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html}}).\
\
Il server apre un Socket (per indirizzo e porta vedi file configServer.txt), dal quale accetta nuove connessioni dai Client che si connettono, ogni client \'e8 gestito da un thread tramite una CachedThreadPool. I thread condivideranno due strutture dati principali, una contenente la lista di tutti gli utenti registrati al gioco (ConcurrentLinkedQueue), ed una AtomicReference<String>, cio\'e8 una stringa thread-safe contenente la parola da indovinare.\
\
Viene avviato un thread esterno alla threadpool che periodicamente aggiorna la parola da indovinare.\
Il server \'e8 progettato per essere sempre in esecuzione e garantire sempre il servizio, ma qualora ci dovesse essere un errore, prima della terminazione esso salver\'e0 in memoria permanente la lista di persone registrate aggiornata all\'92ultima modifica, in un file json.\
\
Ogni persona \'e8 modellata dalla classe Utente, classe serializzabile che viene gestita grazie alla libreria Gson, ha 12 campi:\
-username (nome univoco usato per rappresentare il giocatore all\'92interno i WORDLE);\
-password (parola chiave usata per accede al gioco);\
-isLogged (variabile che fa capire al server se c\'92\'e8 gi\'e0 un altro client che ha fatto l\'92accesso con le stesse credenziali);\
-\cf3 \CocoaLigature1 word (parola che l\'92utente deve indovinare);\
\pard\pardeftab720\partightenfactor0
\cf3 -tentativi (numero di tentativi effettuati per indovinare la parola word);\
-indovinata (utile al server per capire se l\'92utente ha gi\'e0 indovinato la parola corrente);\
-partite_giocate (conta il numero di partite giocate dall\'92utente);\
-partite_vinte (conta il numero di partite vinte dall\'92utente);\
-perc_vinte (percentuale di vittorie per l\'92utente);\
-streak (conta quante parole consecutive ha indovinato l\'92utente);\
-max_streak (tiene a memoria la streak pi\'f9 lunga);\
-guess_distribution (per ogni partita vinta conta quanti tentativi ci sono voluti);\cf2 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\
Dopo aver accettato la connessione di un client, il thread che lo gestisce offre la possibilit\'e0 di fare diverse cose:\
-Registrazione, riceve username e password dal client e fa vari controlli. Il primo \'e8 sulla password la quale non deve essere vuota, altrimenti manda al client errore con codice due. Il secondo controlla se l\'92username \'e8 gi\'e0 stato usato da qualcun altro, in caso positivo manda al client errore con codice due, altrimenti aggiunge il nuovo utente alla lista degli utenti registrati e manda al client un codice di conferma 1;\
-Login, riceve username e password dal client e se \'e8 presente un utente con tali credenziali e questo utente non ha gi\'e0 fatto l\'92accesso da un altro terminale, permette al client di accedere al servizio mandando codice 1, altrimenti manda codice di errore 2.\
Dopo aver effettuato l\'92accesso, il client avr\'e0 la possibilit\'e0 di accedere a tutte le funzioni di gioco e statistiche o di disconnettersi:\
-Logout, scollega l\'92Utente.\
-Play, controlla se l\'92utente \'e8 abilitato a giocare ad indovinare la parola, cio\'e8 se ha gi\'e0 giocato esaurendo i tentativi disponibili o se l\'92ha gi\'e0 indovinata. Se non abilitato manda al client errore con codice 2, altrimenti invia codice 1 e aspetta un tentativo di indovinare la parola dal client, se il client indovina ritorna codice 1, se il client invia una parola inesistente manda un codice di errore 3, se il client invia una parola sbagliata, manda un codice di errore 2 ed un suggerimento, tutto questo per un numero di tentativi minore o uguale a 12, superati i 12 tentativi invia al client codice 4.\
-SendMeStatistics, invia al client le sue statistiche di gioco.\
-Share, invia a tutti i membri del gruppo di condivisione statistiche, le statistiche dell\'92utente.\
\

\f1\b Client\

\f0\b0 All\'92avvio il client legge tutti i parametri di configurazione dal file \'93configClient.txt\'94, la presenza di questo file \'e8 obbligatoria.\
\
Il client apre un socket tramite il quale si collegher\'e0 al server con connessione TCP, apre pure un socket che si mette in ascolto tramite UDP attraverso un thread lanciato all\'92avvio per ricevere e salvare in una ConcurrentLinkedQueue, ossia una coda concorrente thread-safe (vedi documentazione ufficiale: {\field{\*\fldinst{HYPERLINK "https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html"}}{\fldrslt https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html}}), le statistiche di tutti gli utenti del gruppo di condivisione alla quale ci si iscrive dopo il login.\
\
All\'92avvio l\'92interfaccia CLI ci pone davanti a tre scelte:\
1.Registrati, prende in input da tastiera username e password, li manda al server, aspetta il codice di ritorno e stampa il messaggio di errore o di registrazione avvenuta con successo.\
2.Login, prende in input da tastiera username e password, li manda al server, aspetta il codice di ritorno e stampa il messaggio di errore o di login avvenuto con successo, in quest\'92ultimo caso il client si iscrive al gruppo di condivisione statistiche e inizia il gioco.\
\
Dopo l\'92accesso al gioco, la CLI ci mostra un men\'f9 di scelta con 5 opzioni:\
1.Logout, disconnettersi dal gioco.\
2.Play Wordle, se l\'92utente ha gi\'e0 giocato mostra a video un errore, altrimenti si pu\'f2 iniziare a giocare; ci viene mostrata l\'92opzione di inviare una parola presa in input da tastiera, se la parola non sar\'e0 corretta ci verrano mostrati messaggi di errore ed eventualmente dei suggerimenti. Questo processo termina se si indovina la parola o se si superano i tentativi massimi giornalieri di 12.\
3.Le mie statistiche, mostra le statistiche personali.\
4.Condividi le mie statistiche, acconsenti al server di inviare le tue statistiche al gruppo di condivisione al quale ci eravamo precedentemente iscritti.\
5.Statistiche globali, mostra le statistiche di tutti i giocatori del gruppo di condivisione.}